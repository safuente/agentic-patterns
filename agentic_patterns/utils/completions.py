def create_completion(client, messages: list[dict], model:str) -> str:
    """
    Sends a list of messages to the specified model using the Groq client and returns the generated response.

    Args:
        messages (list[dict]): A list of message objects representing the conversation history to send to the model.
        model (str): The name or identifier of the model to use for generating the completion.

    Returns:
        str: The response generated by the model as a string.
    """
    response = client.chat.completions.create(
        messages=messages,
        model=model,
    )
    return str(response.choices[0].message.content)

def build_prompt(role: str, content: str, tag: str = None) -> dict:
    """
    Builds a prompt for the model.
    """
    if tag:
        content = f"<{tag}>{content}</{tag}>"
    return {"role": role, "content": content}


class ChatHistory(list):
    def __init__(self, messages=None, total_length=-1, fixed_first=False):
        super().__init__(messages or [])
        self.total_length = total_length
        self.fixed_first = fixed_first

    def append(self, msg):
        if len(self) == self.total_length:
            self.pop(1 if self.fixed_first else 0)
        super().append(msg)
    
    def update_chat_history(self, msg: str, role: str):
        """
        Updates the chat history with a new message.
        """
        self.append(build_prompt(role=role, content=msg))